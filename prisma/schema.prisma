generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Comment {
  id        Int       @id @default(autoincrement())
  userId    Int       @default(autoincrement()) @map("user_id")
  postId    Int       @default(autoincrement()) @map("post_id")
  content   String
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime  @default(now()) @map("updated_at") @db.Timestamptz(6)
  Post    Post      @relation(fields: [postId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_post_tb_to_comment_tb")
  User    User    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_tb_to_comment_tb")
  Reply   Reply[]

  @@map("coment_tb")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model PostImg {
  id        Int      @id @default(autoincrement())
  postId    Int      @default(autoincrement()) @map("post_id")
  postImg   String?  @map("post_img")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  Post    Post     @relation(fields: [postId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_post_tb_to_post_img_tb")

  @@map("post_img_tb")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model Post {
  id        Int         @id @default(autoincrement())
  userId    Int         @default(autoincrement()) @map("user_id")
  title     String      @db.VarChar(100)
  content   String
  createdAt DateTime    @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime    @default(now()) @map("updated_at") @db.Timestamptz(6)
  comentTb  Comment[]
  postImgTb PostImg[]
  User    User      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_tb_to_post_tb")

  @@map("post_tb")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model Reply {
  id        Int      @id @default(autoincrement())
  userId    Int      @default(autoincrement()) @map("user_id")
  commentId Int      @default(autoincrement()) @map("comment_id")
  content   String
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamptz(6)
  Comment  Comment @relation(fields: [commentId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_comment_tb_to_reply_tb")
  User    User   @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_tb_to_reply_tb")

  @@map("reply_tb")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model User {
  id          Int        @id @default(autoincrement())
  loginId     String     @map("login_id") @db.VarChar(30)
  password    String     @db.Char(60)
  email       String     @db.VarChar(256)
  name        String     @db.VarChar(10)
  phoneNumber String     @map("phone_number") @db.Char(11)
  profileImg  String     @map("profile_img")
  provider    String?    @db.VarChar(10)
  createdAt   DateTime   @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime   @default(now()) @map("updated_at") @db.Timestamptz(6)
  Comment    Comment[]
  Post      Post[]
  Reply     Reply[]

  @@map("user_tb")
}
